#!/usr/bin/python3
#	pibeatsaber - Beat Saber historian application that tracks players
#	Copyright (C) 2019-2019 Johannes Bauer
#
#	This file is part of pibeatsaber.
#
#	pibeatsaber is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	pibeatsaber is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import sys
import json
import websockets
import time
import asyncio
from FriendlyArgumentParser import FriendlyArgumentParser
from Configuration import Configuration

parser = FriendlyArgumentParser(description = "Beat Saber Historian, replays mock data previously recorded.")
parser.add_argument("-c", "--config-file", metavar = "filename", type = str, default = "configuration.json", help = "Specifies JSON config file to use. Defaults to %(default)s.")
parser.add_argument("-s", "--speed", metavar = "factor", type = float, default = 1.0, help = "Speed factor at which to replay. Defaults to %(default).1f")
parser.add_argument("-m", "--max-delay", metavar = "seconds", type = float, default = 1, help = "Maximum delay in seconds inbetween messages. Defaults to %(default).1f.")
parser.add_argument("-p", "--port", metavar = "port", type = int, default = 6557, help = "Port at which to listen. Defaults to %(default)d")
parser.add_argument("-g", "--global-listen", action = "store_true", help = "Bind globally, i.e., make the server available for external connections. By default, only localhost is bound.")
parser.add_argument("-d", "--disconnect", action = "store_true", help = "Disconnect after serving data (only if no re-serving is in effect).")
parser.add_argument("-n", "--no-re-serve", action = "store_true", help = "Serve only once, do not re-serve the same mock data after the re-serving delay has passed.")
parser.add_argument("-r", "--re-serve-delay", metavar = "seconds", type = float, default = 5, help = "When sending all data is finished, wait this amount of seconds and then re-serve all data. Defaults to %(default).1f seconds.")
parser.add_argument("mockfile", metavar = "mockfile", type = str, help = "JSON mock file to replay.")
args = parser.parse_args(sys.argv[1:])

with open(args.mockfile) as f:
	mockfile = json.load(f)

async def serve_method(websocket, path):
	mock_t0 = mockfile["events"][0]["msg"]["time"]
	if path == "/socket":
		while True:
			t0 = time.time()
			last_print_ts = 0
			for (eid, event) in enumerate(mockfile["events"], 1):
				now = time.time()
				rel_ts = event["ts"] / args.speed
				occurrence = rel_ts + t0
				delay = occurrence - now
				if delay > 0:
					if (args.max_delay >= 0) and (delay > args.max_delay):
						t0 -= delay - args.max_delay
						delay = args.max_delay
					await asyncio.sleep(delay)

				msg = dict(event["msg"])
				new_time = msg["time"] - mock_t0 + round(t0 * 1000)
				msg["time"] = new_time
				await websocket.send(json.dumps(msg))
				if (now - last_print_ts) > 1:
					print("%d / %d: %.1f%%" % (eid, len(mockfile["events"]), eid / len(mockfile["events"]) * 100))
					last_print_ts = now

			if args.no_re_serve:
				break
			else:
				await asyncio.sleep(args.re_serve_delay)
		if not args.disconnect:
			print("Finished, now keeping connection alive.")
			while True:
				await asyncio.sleep(1)
		else:
			print("Finished, disconnecting.")


loop = asyncio.get_event_loop()
loop.run_until_complete(websockets.serve(serve_method, "127.0.0.1" if (not args.global_listen) else "0.0.0.0", args.port))
loop.run_forever()
