#!/usr/bin/python3
#	pibeatsaber - Beat Saber historian application that tracks players
#	Copyright (C) 2019-2019 Johannes Bauer
#
#	This file is part of pibeatsaber.
#
#	pibeatsaber is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	pibeatsaber is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import os
import sys
import json
from HistorianDatabase import HistorianDatabase
from FriendlyArgumentParser import FriendlyArgumentParser
from Configuration import Configuration
from DAOObjects import DifficultyEnum

parser = FriendlyArgumentParser(description = "Beat Saber Historian, prints latest results of recorded games.")
parser.add_argument("-c", "--config-file", metavar = "filename", type = str, default = "configuration.json", help = "Specifies JSON config file to use. Defaults to %(default)s.")
parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increases verbosity. Can be specified multiple times to increase.")
args = parser.parse_args(sys.argv[1:])

config = Configuration(args.config_file)
db = HistorianDatabase(config)

for (dirname, subdirs, files) in os.walk(config["history_directory"]):
	for filename in files:
		if filename.startswith("."):
			continue
		if not (filename.endswith(".json") or filename.endswith(".json.gz")):
			continue
		full_filename = dirname + "/" + filename
		db.parse_history(full_filename)

def format_result(result, ref_score = 0, show_song = False):
	percentage = (result["score"] / result["max_score"] * 100) if (result["max_score"] != 0) else 0
	ref_percentage = (result["score"] / ref_score * 100) if (ref_score != 0) else 0

	cols = [ ]
	cols.append("%-15s" % (result["player"]))
	cols.append("%-15s" % (result["score"]))
	cols.append("%5.1f%%" % (percentage))
	cols.append("%5.1f%%" % (ref_percentage))
	cols.append("%-2s" % (result["rank"]))
	cols.append("%4d" % (result["max_combo"]))
	cols.append("%-5s" % (result["verdict"]))
	cols.append("%-20s" % (result["local_ts"]))
	if show_song:
		cols.append("%s" % (result["song_title"]))
	return " ".join(cols)

for song_key in db.all_song_keys():
	ref_score = None
	print("%s - %s (%s)" % (song_key["song_author"], song_key["song_title"], DifficultyEnum(song_key["difficulty"]).name))
	for (number, entry) in enumerate(db.get_highscores(song_key), 1):
		if ref_score is None:
			ref_score = entry["score"]
		print("%2d) %s" % (number, format_result(entry, ref_score)))
	print()

playtimes_today = db.get_playtimes_today()
if len(playtimes_today) == 0:
	print("No games played today yet.")
else:
	print("Playtimes today:")
	for entry in playtimes_today:
		playtime_secs = round(entry.playtime_secs)
		print("%-15s %2d:%02d   %5.2f M   %d" % (entry.player, playtime_secs // 60, playtime_secs % 60, entry.score_sum / 1e6, entry.passed_notes_sum - entry.missed_notes_sum))
print()

last_games = db.get_last_games()
if len(last_games) == 0:
	print("No games played recently.")
else:
	print("Last games:")
	for last_game in last_games:
		print(format_result(last_game, show_song = True))

#print(json.dumps(db.get_player_info("joe"), sort_keys = True, indent = 4))
