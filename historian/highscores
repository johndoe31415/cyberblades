#!/usr/bin/python3
#	pibeatsaber - Beat Saber historian application that tracks players
#	Copyright (C) 2019-2019 Johannes Bauer
#
#	This file is part of pibeatsaber.
#
#	pibeatsaber is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	pibeatsaber is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import os
import sys
import json
from HistorianDatabase import HistorianDatabase
from FriendlyArgumentParser import FriendlyArgumentParser
from Configuration import Configuration

parser = FriendlyArgumentParser(description = "Beat Saber Historian, prints latest results of recorded games.")
parser.add_argument("-c", "--config-file", metavar = "filename", type = str, default = "configuration.json", help = "Specifies JSON config file to use. Defaults to %(default)s.")
parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increases verbosity. Can be specified multiple times to increase.")
args = parser.parse_args(sys.argv[1:])

config = Configuration(args.config_file)
db = HistorianDatabase(config)

for (dirname, subdirs, files) in os.walk("history"):
	for filename in files:
		if filename.startswith("."):
			continue
		if not (filename.endswith(".json") or filename.endswith(".json.gz")):
			continue
		full_filename = dirname + "/" + filename
		db.parse_history(full_filename)

#for result in db.recent_results():
#	print(result)
for song_difficulty in db.all_song_difficulties():
	print("%s - %s (%d)" % (song_difficulty.song_author, song_difficulty.song_title, song_difficulty.difficulty))
	for (number, entry) in enumerate(db.get_highscores(song_difficulty), 1):
		print("%2d) %-15s %6d %4d %s" % (number, entry.player, entry.result_score, entry.max_combo, entry.result_verdict))
	print()
